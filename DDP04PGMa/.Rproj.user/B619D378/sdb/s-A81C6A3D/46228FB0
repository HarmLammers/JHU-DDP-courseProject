{
    "collab_server" : "",
    "contents" : "---\ntitle: 'Shiny: Part 2'\nauthor: \"The Johns Hopkins Data Science Lab\"\nalways_allow_html: yes\n---\n\n## Reactivity\n\nA reactive expression is like a recipe that manipulates\ninputs from Shiny and then returns a value. Reactivity\nprovides a way for your app to respond since inputs will \nchange depending on how users interact with your user \ninterface. Expressions wrapped by `reactive()` should be\nexpressions that are subject to change.\n\n## Reactivity\n\nCreating a reactive expression is just like creating a\nfunction:\n\n```r\ncalc_sum <- reactive({\n  input$box1 + input$box2\n})\n\n# ...\n\ncalc_sum()\n```\n\n## Your First Reactive App\n\n```{r, echo=FALSE}\nlibrary(webshot)\nappshot(\"app1\", \"app1.png\")\n```\n\nThis application predicts the horsepower of a car given\nthe fuel efficiency in miles per gallon for the car.\n\n## Horsepower Prediction: ui.R Part 1\n\n```r\nlibrary(shiny)\nshinyUI(fluidPage(\n  titlePanel(\"Predict Horsepower from MPG\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"sliderMPG\", \"What is the MPG of the car?\", 10, 35, value = 20),\n      checkboxInput(\"showModel1\", \"Show/Hide Model 1\", value = TRUE),\n      checkboxInput(\"showModel2\", \"Show/Hide Model 2\", value = TRUE)\n    ),\n# ...\n```\n\n## Horsepower Prediction: ui.R Part 2\n\n```r\n# ...\n    mainPanel(\n      plotOutput(\"plot1\"),\n      h3(\"Predicted Horsepower from Model 1:\"),\n      textOutput(\"pred1\"),\n      h3(\"Predicted Horsepower from Model 2:\"),\n      textOutput(\"pred2\")\n    )\n  )\n))\n```\n\n## Horsepower Prediction: server.R Part 1\n\n```r\nlibrary(shiny)\nshinyServer(function(input, output) {\n  mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)\n  model1 <- lm(hp ~ mpg, data = mtcars)\n  model2 <- lm(hp ~ mpgsp + mpg, data = mtcars)\n  \n  model1pred <- reactive({\n    mpgInput <- input$sliderMPG\n    predict(model1, newdata = data.frame(mpg = mpgInput))\n  })\n  \n  model2pred <- reactive({\n    mpgInput <- input$sliderMPG\n    predict(model2, newdata = \n              data.frame(mpg = mpgInput,\n                         mpgsp = ifelse(mpgInput - 20 > 0,\n                                        mpgInput - 20, 0)))\n  })\n```\n\n## Horsepower Prediction: server.R Part 2\n\n```r\n  output$plot1 <- renderPlot({\n    mpgInput <- input$sliderMPG\n    \n    plot(mtcars$mpg, mtcars$hp, xlab = \"Miles Per Gallon\", \n         ylab = \"Horsepower\", bty = \"n\", pch = 16,\n         xlim = c(10, 35), ylim = c(50, 350))\n    if(input$showModel1){\n      abline(model1, col = \"red\", lwd = 2)\n    }\n    if(input$showModel2){\n      model2lines <- predict(model2, newdata = data.frame(\n        mpg = 10:35, mpgsp = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)\n      ))\n      lines(10:35, model2lines, col = \"blue\", lwd = 2)\n    }\n```\n\n## Horsepower Prediction: server.R Part 3\n\n```r\n  legend(25, 250, c(\"Model 1 Prediction\", \"Model 2 Prediction\"), pch = 16, \n           col = c(\"red\", \"blue\"), bty = \"n\", cex = 1.2)\n    points(mpgInput, model1pred(), col = \"red\", pch = 16, cex = 2)\n    points(mpgInput, model2pred(), col = \"blue\", pch = 16, cex = 2)\n  })\n  \n  output$pred1 <- renderText({\n    model1pred()\n  })\n  \n  output$pred2 <- renderText({\n    model2pred()\n  })\n})\n```\n\n## Horsepower Prediction\n\n![](app1.png)\n\n## Delayed Reactivity\n\nYou might not want your app to immediately react to changes\nin user input because of something like a long-running\ncalculation. In order to prevent reactive expressions from\nreacting you can use a submit button in your app. Let's take\na look at last app we created, but with a submit button\nadded to the app.\n\n```{r, echo=FALSE}\nlibrary(webshot)\nappshot(\"app2\", \"app2.png\")\n```\n\n## Reactive Horsepower: ui.R\n\nThere's one new line added to the code from the last app:\n\n```r\nshinyUI(fluidPage(\n  titlePanel(\"Predict Horsepower from MPG\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"sliderMPG\", \"What is the MPG of the car?\", 10, 35, value = 20),\n      checkboxInput(\"showModel1\", \"Show/Hide Model 1\", value = TRUE),\n      checkboxInput(\"showModel2\", \"Show/Hide Model 2\", value = TRUE),\n      submitButton(\"Submit\") # New!\n    ),\n```\n\n## Reactive Horsepower\n\n![](app2.png)\n\n## Advanced UI\n\nThere are several other kinds of UI components that you can\nmix into your app including tabs, navbars, and sidebars.\nWe'll show you an example of how to use tabs to give your app\nmultiple views. The `tabsetPanel()` function specifies a\ngroup of tabs, and then the `tabPanel()` function specifies\nthe contents of an individual tab.\n\n```{r, echo=FALSE}\nlibrary(webshot)\nappshot(\"app3\", \"app3.png\")\n```\n\n## Tabs: ui.R\n\n```r\nlibrary(shiny)\nshinyUI(fluidPage(\n  titlePanel(\"Tabs!\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"box1\", \"Enter Tab 1 Text:\", value = \"Tab 1!\"),\n      textInput(\"box2\", \"Enter Tab 2 Text:\", value = \"Tab 2!\"),\n      textInput(\"box3\", \"Enter Tab 3 Text:\", value = \"Tab 3!\")\n    ),\n    mainPanel(\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(\"Tab 1\", br(), textOutput(\"out1\")), \n                  tabPanel(\"Tab 2\", br(), textOutput(\"out2\")), \n                  tabPanel(\"Tab 2\", br(), textOutput(\"out3\"))\n      )\n    )\n  )\n))\n```\n\n## Tabs: server.R\n\n```r\nlibrary(shiny)\nshinyServer(function(input, output) {\n  output$out1 <- renderText(input$box1)\n  output$out2 <- renderText(input$box2)\n  output$out3 <- renderText(input$box3)\n})\n```\n\n## Tabs\n\n![](app3.png)\n\n## Interactive Graphics\n\nOne of my favorite features of Shiny is the ability to create\ngraphics that a user can interact with. One method you can\nuse to select multiple data points on a graph is\nby specifying the `brush` argument in `plotOutput()` on the\n`ui.R` side, and then using the `brushedPoints()` function on\nthe `server.R` side. The following example app fits a\nlinear model for the selected points and then draws a line \nof best fit for the resulting model.\n\n```{r, echo=FALSE}\nlibrary(webshot)\nappshot(\"app4\", \"app4.png\")\n```\n\n## Interactive Graphics: ui.R\n\n```r\nlibrary(shiny)\nshinyUI(fluidPage(\n  titlePanel(\"Visualize Many Models\"),\n  sidebarLayout(\n    sidebarPanel(\n      h3(\"Slope\"),\n      textOutput(\"slopeOut\"),\n      h3(\"Intercept\"),\n      textOutput(\"intOut\")\n    ),\n    mainPanel(\n      plotOutput(\"plot1\", brush = brushOpts(\n        id = \"brush1\"\n      ))\n    )\n  )\n))\n```\n\n## Interactive Graphics: server.R Part 1\n\n```r\nlibrary(shiny)\nshinyServer(function(input, output) {\n  model <- reactive({\n    brushed_data <- brushedPoints(trees, input$brush1,\n                            xvar = \"Girth\", yvar = \"Volume\")\n    if(nrow(brushed_data) < 2){\n      return(NULL)\n    }\n    lm(Volume ~ Girth, data = brushed_data)\n  })\n  output$slopeOut <- renderText({\n    if(is.null(model())){\n      \"No Model Found\"\n    } else {\n      model()[[1]][2]\n    }\n  })\n# ...\n```\n\n## Interactive Graphics: server.R Part 2\n\n```r\n# ...\noutput$intOut <- renderText({\n    if(is.null(model())){\n      \"No Model Found\"\n    } else {\n      model()[[1]][1]\n    }\n  })\n  output$plot1 <- renderPlot({\n    plot(trees$Girth, trees$Volume, xlab = \"Girth\",\n         ylab = \"Volume\", main = \"Tree Measurements\",\n         cex = 1.5, pch = 16, bty = \"n\")\n    if(!is.null(model())){\n      abline(model(), col = \"blue\", lwd = 2)\n    }\n  })\n})\n```\n\n## Interactive Graphics\n\n![](app4.png)\n\n## Sharing Shiny Apps\n\nOnce you've created a Shiny app, there are several ways to\nshare your app. Using [shinyapps.io](http://www.shinyapps.io/)\nallows users to interact with your app through a web browser\nwithout needing to have R or Shiny installed. Shinyapps.io\nhas a free tier, but if you want to use a Shiny app in your\nbusiness you may be interested in paying for the service. If\nyou're sharing your app with an R user you can post your app\nto GitHub and instruct the user to use the `runGist()` or \n`runGitHub()` function to launch your app.\n\n## More Shiny Resources\n\n- [The Official Shiny Tutorial](http://shiny.rstudio.com/tutorial/)\n- [Gallery of Shiny Apps](http://shiny.rstudio.com/gallery/)\n- [Show Me Shiny: Gallery of R Web Apps](http://www.showmeshiny.com/)\n- [Integrating Shiny and Plotly](https://plot.ly/r/shiny-tutorial/)\n- [Shiny on Stack Overflow](http://stackoverflow.com/questions/tagged/shiny)",
    "created" : 1492005136033.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3173310290",
    "id" : "46228FB0",
    "lastKnownWriteTime" : 1490388667,
    "last_content_update" : 1490388667,
    "path" : "C:/AA DataScience/courses-master/09 Developing Data Products/Shiny_Part_2/Shiny_Part_2.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}